package commands

import (
	"fmt"

	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/common"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/core"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/services"
	Utils "github.com/Miso-Code/buildpacks-ci/cve-notification-app/utils"
	"github.com/spf13/cobra"
)

// UpdateTrackedDepsCommand creates a new update-tracked-deps command
func UpdateTrackedDepsCommand() *cobra.Command {
	var jsonFilePath string

	cmd := &cobra.Command{
		Use:   "update-tracked-deps",
		Short: "Update tracked dependencies",
		Long:  `This command updates tracked dependencies.`,
		Run: func(cmd *cobra.Command, args []string) {
			updateTrackedDeps(jsonFilePath)
		},
	}

	cmd.Flags().StringVarP(&jsonFilePath, "csv-file", "f", "", "The JSON file containing the list of tracked dependencies")

	return cmd
}

// updateTrackedDeps is the function that actually performs the update-tracked-deps task
func updateTrackedDeps(jsonFilePath string) {
	config, configExists := Utils.GetConfigFile()
	if !configExists {
		return
	}

	librariesUtil := common.LibrariesUtil{
		MongoLibrary:     services.NewMongoLibrary(config.DbUri),
		NvdNistLibrary:   services.NewNVDNistLibrary(config.NvdNistApiKey),
		CSVReaderLibrary: services.NewCSVReaderLibrary(jsonFilePath),
		SlackLibrary:     services.SlackLibrary{},
	}

	addedDeps, removedDeps, err := core.UpdateTrackedDependencies(librariesUtil)
	if err != nil {
		fmt.Println(fmt.Sprintf("Error updating tracked dependencies: %v", err))
		return
	}

	if len(addedDeps) > 0 {
		fmt.Println("Added dependencies:")
		for _, dep := range addedDeps {
			fmt.Println(dep)
		}
	}

	if len(removedDeps) > 0 {
		fmt.Println("Removed dependencies:")
		for _, dep := range removedDeps {
			fmt.Println(dep)
		}
	}
}

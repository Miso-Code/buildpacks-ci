package commands

import (
	"fmt"

	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/common"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/core"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/services"
	Utils "github.com/Miso-Code/buildpacks-ci/cve-notification-app/utils"
	"github.com/spf13/cobra"
)

// FindNewCvesCommand creates a new find-new-cves command
func FindNewCvesCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "find-new-cves",
		Short: "Find new CVEs",
		Long:  `This command finds and lists new CVEs.`,
		Run: func(cmd *cobra.Command, args []string) {
			findNewCves()
		},
	}
	return cmd
}

// findNewCves is the function that actually performs the find-new-cves task
func findNewCves() {
	config, configExists := Utils.GetConfigFile()
	if !configExists {
		return
	}

	slackLibrary := services.SlackLibrary{}

	if config.SlackWebhookUrl != "" {
		slackLibrary = services.NewSlackLibrary(config.SlackWebhookUrl)
	}

	librariesUtil := common.LibrariesUtil{
		MongoLibrary:     services.NewMongoLibrary(config.DbUri),
		NvdNistLibrary:   services.NewNVDNistLibrary(config.NvdNistApiKey),
		SlackLibrary:     slackLibrary,
		CSVReaderLibrary: services.CSVReaderLibrary{},
	}

	jsonResult, err := core.FindNewCVEs(librariesUtil)
	if err != nil {
		fmt.Println("Error finding new CVEs")
		return
	}

	if jsonResult != "" {
		fmt.Println(jsonResult)
	} else {
		fmt.Println("No new CVEs found.")
	}
}

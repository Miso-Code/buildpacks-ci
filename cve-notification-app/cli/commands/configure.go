package commands

import (
	"bufio"
	"fmt"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/utils"
	"gopkg.in/yaml.v3"
	"os"
	"strings"

	"github.com/spf13/cobra"
)

// Config structure to hold configuration values
type Config struct {
	DbUri           string `yaml:"db_uri"`
	NvdNistApiKey   string `yaml:"nvd_nist_api_key"`
	SlackWebhookUrl string `yaml:"slack_webhook_url"`
}

// ConfigureCommand creates a new configure command
func ConfigureCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "configure",
		Short: "Configure the application",
		Long:  `This command configures the application.`,
		Run: func(cmd *cobra.Command, args []string) {
			configure()
		},
	}

	return cmd
}

// configure is the function that actually performs the configure task
func configure() {
	var (
		dbUri           string
		nvdNistApiKey   string
		slackWebhookUrl string
	)
	reader := bufio.NewReader(os.Stdin)

	dbUriEnvVar, dbUriEnvVarExists := checkForEnvVar("DB_URI")
	nvdNistApiKeyEnvVar, nvdNistApiKeyEnvVarExists := checkForEnvVar("NVD_NIST_API_KEY")
	slackWebhookUrlEnvVar, slackWebhookUrlEnvVarExists := checkForEnvVar("SLACK_WEBHOOK_URL")

	if dbUriEnvVarExists {
		fmt.Println("DB_URI environment variable found. Using it as the default value.")
		dbUri = dbUriEnvVar
	} else {
		fmt.Print("Enter Database URI: ")
		dbUri, _ = reader.ReadString('\n')
		dbUri = strings.TrimSpace(dbUri)
	}

	if nvdNistApiKeyEnvVarExists {
		fmt.Println("NVD_NIST_API_KEY environment variable found. Using it as the default value.")
		nvdNistApiKey = nvdNistApiKeyEnvVar
	} else {
		fmt.Print("Enter NVD Nist API Key: ")
		nvdNistApiKey, _ = reader.ReadString('\n')
		nvdNistApiKey = strings.TrimSpace(nvdNistApiKey)
	}

	if slackWebhookUrlEnvVarExists {
		fmt.Println("SLACK_WEBHOOK_URL environment variable found. Using it as the default value.")
		slackWebhookUrl = slackWebhookUrlEnvVar
	} else {
		fmt.Print("Enter Slack Webhook URL [optional]: ")
		slackWebhookUrl, _ = reader.ReadString('\n')
		slackWebhookUrl = strings.TrimSpace(slackWebhookUrl)
	}

	config := Config{
		DbUri:           dbUri,
		NvdNistApiKey:   nvdNistApiKey,
		SlackWebhookUrl: slackWebhookUrl,
	}

	configDir, configFile := utils.GetConfigFilePath()

	if err := os.MkdirAll(configDir, 0755); err != nil {
		fmt.Println("Error creating config directory:", err)
		return
	}

	file, err := os.Create(configFile)
	if err != nil {
		fmt.Println("Error creating config file:", err)
		return
	}
	defer file.Close()

	encoder := yaml.NewEncoder(file)
	if err := encoder.Encode(config); err != nil {
		fmt.Println("Error writing config file:", err)
		return
	}

	fmt.Println("Configuration saved to", configFile)
}

func checkForEnvVar(envVar string) (string, bool) {
	value, exists := os.LookupEnv(envVar)
	if !exists {
		return "", false
	}

	return value, true
}

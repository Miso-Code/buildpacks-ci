package core

import (
	"time"

	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/common"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/utils"

	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/services"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

func FillDatabase(librariesUtil common.LibrariesUtil) error {
	mongoClient, ctx, err := librariesUtil.MongoLibrary.GetMongoClient()
	if err != nil {
		return err
	}

	trackedDependencies, err := librariesUtil.MongoLibrary.GetUniqueDependencies(ctx, mongoClient)
	if err != nil {
		return err
	}

	for _, dependency := range trackedDependencies {
		cves, err := librariesUtil.NvdNistLibrary.GetCVEs(dependency.Vendor, dependency.Product)
		if err != nil {
			return err
		}

		for _, result := range cves {
			// Get Severity
			cveSeverity, cveScore := utils.GetCVESeverity(result.CVE)

			// Get Description
			cveDescription := utils.GetCVEDescription(result.CVE)

			cve := services.CVE{
				ID:          primitive.NewObjectID(),
				CreatedAt:   time.Now(),
				UpdatedAt:   time.Now(),
				Vendor:      dependency.Vendor,
				Product:     dependency.Product,
				Severity:    cveSeverity,
				Score:       cveScore,
				CVEId:       result.CVE.Id,
				Description: cveDescription,
			}

			err := librariesUtil.MongoLibrary.CreateCVE(ctx, mongoClient, &cve)
			if err != nil {
				return err
			}
		}
	}

	err = librariesUtil.MongoLibrary.DisconnectMongoClient(mongoClient, ctx)
	if err != nil {
		return err
	}

	return nil
}

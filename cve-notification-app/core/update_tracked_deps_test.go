package core_test

import (
	contextPkg "context"
	"fmt"
	"testing"

	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/common"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/core"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/services"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/services/servicesfakes"
	"github.com/sclevine/spec"
	"github.com/sclevine/spec/report"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
	"go.mongodb.org/mongo-driver/mongo"
)

func TestUpdateTrackedDependenciesTask(t *testing.T) {
	spec.Run(t, "Update Tracked Dependencies Task", testUpdateTrackedDependenciesTask, spec.Report(report.Terminal{}))
}

func testUpdateTrackedDependenciesTask(t *testing.T, context spec.G, it spec.S) {
	var (
		assert         = assertpkg.New(t)
		require        = requirepkg.New(t)
		allUtils       common.LibrariesUtil
		fakeMongoUtils *servicesfakes.FakeMongoLibraryInterface
		fakeCSVUtils   *servicesfakes.FakeCSVReaderLibraryInterface
		fakeNVDUtils   *servicesfakes.FakeNVDNistLibraryInterface
		mClient        *mongo.Client
		ctx            contextPkg.Context
	)

	it.Before(func() {
		fakeMongoUtils = &servicesfakes.FakeMongoLibraryInterface{}
		fakeCSVUtils = &servicesfakes.FakeCSVReaderLibraryInterface{}
		fakeNVDUtils = &servicesfakes.FakeNVDNistLibraryInterface{}

		allUtils = common.LibrariesUtil{
			MongoLibrary:     fakeMongoUtils,
			CSVReaderLibrary: fakeCSVUtils,
			NvdNistLibrary:   fakeNVDUtils,
		}

		mClient = &mongo.Client{}
		ctx = contextPkg.TODO()
	})

	context("Calls the UpdateTrackedDependencies method", func() {
		context("succeed", func() {
			it.Before(func() {
				fakeMongoUtils.GetMongoClientReturns(mClient, ctx, nil)

				fileDeps := []services.DepList{
					{
						Vendor:  "cisco",
						Product: "appdynamics_iq",
					},
					{
						Vendor:  "golang",
						Product: "go",
					},
				}

				trackedDeps := []services.Dependency{
					{
						Vendor:  "haxx",
						Product: "curl",
					},
					{
						Vendor:  "golang",
						Product: "go",
					},
				}

				fakeCSVUtils.GetDependenciesListReturns(fileDeps, nil)
				fakeMongoUtils.GetTrackedDependenciesReturns(trackedDeps, nil)

				fakeNVDUtils.GetCVEsReturns([]services.NVDNistResponseCVEItem{}, nil)
				fakeMongoUtils.AddTrackedDependenciesReturns(nil)
				fakeMongoUtils.RemoveTrackedDependenciesReturns(nil)
			})

			it("Updates the tracked dependencies", func() {
				addedDependencies, removedDependencies, err := core.UpdateTrackedDependencies(allUtils)
				require.NoError(err)

				assert.Equal(1, len(addedDependencies))
				assert.Equal(1, len(removedDependencies))

				assert.Equal("appdynamics_iq", addedDependencies[0])
				assert.Equal("curl", removedDependencies[0])
			})
		})

		context("fails", func() {
			context("getting mongo client", func() {
				it.Before(func() {
					fakeMongoUtils.GetMongoClientReturns(nil, nil, fmt.Errorf("client"))
				})

				it("return an error", func() {
					_, _, err := core.UpdateTrackedDependencies(allUtils)
					require.Error(err)
					assert.EqualError(err, "client")
				})
			})

			context("getting dependencies list", func() {
				it.Before(func() {
					fakeMongoUtils.GetMongoClientReturns(mClient, ctx, nil)
					fakeCSVUtils.GetDependenciesListReturns(nil, fmt.Errorf("dependencies"))
				})

				it("return an error", func() {
					_, _, err := core.UpdateTrackedDependencies(allUtils)
					require.Error(err)
					assert.EqualError(err, "dependencies")
				})
			})

			context("getting tracked dependencies", func() {
				it.Before(func() {
					fakeMongoUtils.GetMongoClientReturns(mClient, ctx, nil)
					fakeCSVUtils.GetDependenciesListReturns([]services.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
					}, nil)
					fakeMongoUtils.GetTrackedDependenciesReturns(nil, fmt.Errorf("tracked-dependencies"))
				})

				it("return an error", func() {
					_, _, err := core.UpdateTrackedDependencies(allUtils)
					require.Error(err)
					assert.EqualError(err, "tracked-dependencies")
				})
			})

			context("adding new dependencies to track", func() {
				context("getting cves", func() {
					it.Before(func() {
						fakeMongoUtils.GetMongoClientReturns(mClient, ctx, nil)
						fakeCSVUtils.GetDependenciesListReturns([]services.DepList{
							{
								Vendor:  "cisco",
								Product: "appdynamics_iq",
							},
							{
								Vendor:  "haxx",
								Product: "curl",
							},
						}, nil)
						fakeMongoUtils.GetTrackedDependenciesReturns([]services.Dependency{}, fmt.Errorf("add-dependency-get-cve"))
					})

					it("return an error", func() {
						_, _, err := core.UpdateTrackedDependencies(allUtils)
						require.Error(err)
						assert.EqualError(err, "add-dependency-get-cve")
					})
				})

				context("creating cves", func() {
					it.Before(func() {
						fakeMongoUtils.GetMongoClientReturns(mClient, ctx, nil)
						fakeCSVUtils.GetDependenciesListReturns([]services.DepList{
							{
								Vendor:  "cisco",
								Product: "appdynamics_iq",
							},
							{
								Vendor:  "haxx",
								Product: "curl",
							},
						}, nil)
						fakeMongoUtils.GetTrackedDependenciesReturns([]services.Dependency{
							{
								Vendor:  "cisco",
								Product: "appdynamics_iq",
							},
						}, nil)
						fakeNVDUtils.GetCVEsReturns([]services.NVDNistResponseCVEItem{}, nil)
						fakeMongoUtils.AddTrackedDependenciesReturns(fmt.Errorf("add-dependency-create-cve"))
					})

					it("return an error", func() {
						_, _, err := core.UpdateTrackedDependencies(allUtils)
						require.Error(err)
						assert.EqualError(err, "add-dependency-create-cve")
					})
				})
			})

			context("deleting dependencies from track", func() {
				it.Before(func() {
					fakeMongoUtils.GetMongoClientReturns(mClient, ctx, nil)
					fakeCSVUtils.GetDependenciesListReturns([]services.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
					}, nil)
					fakeMongoUtils.GetTrackedDependenciesReturns([]services.Dependency{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}, nil)
					fakeMongoUtils.RemoveTrackedDependenciesReturns(fmt.Errorf("remove-all-cves"))
				})

				it("return an error", func() {
					_, _, err := core.UpdateTrackedDependencies(allUtils)
					require.Error(err)
					assert.EqualError(err, "remove-all-cves")
				})
			})
		})
	})
}

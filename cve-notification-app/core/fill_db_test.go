package core_test

import (
	"fmt"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/common"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/core"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/services"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/services/servicesfakes"
	"github.com/sclevine/spec"
	"github.com/sclevine/spec/report"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
	"github.com/tryvium-travels/memongo"
	"github.com/tryvium-travels/memongo/memongolog"
	"go.mongodb.org/mongo-driver/mongo"
	"testing"

	contextPkg "context"
)

func TestFillDBTask(t *testing.T) {
	spec.Run(t, "Fill DB Task", testFillDBTask, spec.Report(report.Terminal{}))
}

func testFillDBTask(t *testing.T, context spec.G, it spec.S) {
	var (
		assert             = assertpkg.New(t)
		require            = requirepkg.New(t)
		allUtils           common.LibrariesUtil
		fakeMongoLibrary   *servicesfakes.FakeMongoLibraryInterface
		fakeNVDNistLibrary *servicesfakes.FakeNVDNistLibraryInterface
		mongoServer        *memongo.Server
		mClient            *mongo.Client
		ctx                contextPkg.Context
		err                error
	)

	it.Before(func() {
		fakeMongoLibrary = &servicesfakes.FakeMongoLibraryInterface{}
		fakeNVDNistLibrary = &servicesfakes.FakeNVDNistLibraryInterface{}

		allUtils = common.LibrariesUtil{
			MongoLibrary:   fakeMongoLibrary,
			NvdNistLibrary: fakeNVDNistLibrary,
		}

		mongoServer, err = memongo.StartWithOptions(&memongo.Options{
			MongoVersion: "6.0.12",
			LogLevel:     memongolog.LogLevelWarn,
		})
		require.NoError(err)

		fakeClient := &mongo.Client{}
		fakeCtx := contextPkg.TODO()
		fakeMongoLibrary.GetMongoClientReturns(fakeClient, fakeCtx, nil)
		fakeMongoLibrary.DisconnectMongoClientReturns(nil)

		mClient = fakeClient
		ctx = fakeCtx
	})

	it.After(func() {
		mongoServer.Stop()
	})

	context("Calls the FillDatabase method", func() {
		context("succeed", func() {
			it.Before(func() {
				deps := []services.CVE{
					{
						Vendor:  "cisco",
						Product: "appdynamics_iq",
					},
					{
						Vendor:  "haxx",
						Product: "curl",
					},
				}

				fakeMongoLibrary.GetUniqueDependenciesReturns(deps, nil)

				cves1 := services.GenerateFakeCVE([]services.FakeCVEParam{
					{
						Id:          common.TestingCVE1Id,
						Description: common.TestingCVE1Description,
						Severity:    common.CVESeverityHigh,
					},
					{
						Id:          common.TestingCVE2Id,
						Description: common.TestingCVE2Description,
						Severity:    common.CVESeverityLow,
					},
				})

				var cves2 []services.NVDNistResponseCVEItem

				fakeNVDNistLibrary.GetCVEsReturnsOnCall(0, cves1, nil)
				fakeNVDNistLibrary.GetCVEsReturnsOnCall(1, cves2, nil)

				fakeMongoLibrary.CreateCVEReturns(nil)
			})

			it("Fills the database with all the dependencies CVEs", func() {
				err := core.FillDatabase(allUtils)
				require.NoError(err)

				_, _, cve := fakeMongoLibrary.CreateCVEArgsForCall(0)
				assert.Equal("cisco", cve.Vendor)
				assert.Equal("appdynamics_iq", cve.Product)
				assert.Equal(common.CVESeverityHigh, cve.Severity)
				assert.Equal(common.TestingCVE1Id, cve.CVEId)
				assert.Equal(common.TestingCVE1Description, cve.Description)

				_, _, cve2 := fakeMongoLibrary.CreateCVEArgsForCall(1)
				assert.Equal("cisco", cve2.Vendor)
				assert.Equal("appdynamics_iq", cve2.Product)
				assert.Equal(common.CVESeverityLow, cve2.Severity)
				assert.Equal(common.TestingCVE2Id, cve2.CVEId)
				assert.Equal(common.TestingCVE2Description, cve2.Description)

				assert.Equal(2, fakeMongoLibrary.CreateCVECallCount())
			})
		})

		context("fails", func() {
			context("getting mongo client", func() {
				it.Before(func() {
					fakeMongoLibrary.GetMongoClientReturns(nil, nil, fmt.Errorf("client"))
				})

				it("returns an error", func() {
					err := core.FillDatabase(allUtils)
					require.Error(err)

					assert.EqualError(err, "client")
				})
			})

			context("getting dependencies list", func() {
				it.Before(func() {
					fakeMongoLibrary.GetMongoClientReturns(mClient, ctx, nil)
					fakeMongoLibrary.GetUniqueDependenciesReturns(nil, fmt.Errorf("dependencies"))
				})

				it("returns an error", func() {
					err := core.FillDatabase(allUtils)
					require.Error(err)

					assert.EqualError(err, "dependencies")
				})
			})

			context("getting CVEs", func() {
				it.Before(func() {
					fakeMongoLibrary.GetMongoClientReturns(mClient, ctx, nil)

					deps := []services.CVE{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}

					fakeMongoLibrary.GetUniqueDependenciesReturns(deps, nil)

					fakeNVDNistLibrary.GetCVEsReturns([]services.NVDNistResponseCVEItem{}, fmt.Errorf("cves"))
				})

				it("returns an error", func() {
					err := core.FillDatabase(allUtils)
					require.Error(err)

					assert.EqualError(err, "cves")
				})
			})

			context("creating CVE in database", func() {
				it.Before(func() {
					fakeMongoLibrary.GetMongoClientReturns(mClient, ctx, nil)

					deps := []services.CVE{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}

					fakeMongoLibrary.GetUniqueDependenciesReturns(deps, nil)

					cves := services.GenerateFakeCVE([]services.FakeCVEParam{
						{
							Id:          common.TestingCVE1Id,
							Description: common.TestingCVE1Description,
							Severity:    common.CVESeverityHigh,
						},
						{
							Id:          common.TestingCVE2Id,
							Description: common.TestingCVE2Description,
							Severity:    common.CVESeverityLow,
						},
					})

					fakeNVDNistLibrary.GetCVEsReturns(cves, nil)

					fakeMongoLibrary.CreateCVEReturns(fmt.Errorf("create-cve"))
				})

				it("returns an error", func() {
					err := core.FillDatabase(allUtils)
					require.Error(err)

					assert.EqualError(err, "create-cve")
				})
			})

			context("disconnecting mongo client", func() {
				it.Before(func() {
					fakeMongoLibrary.GetMongoClientReturns(mClient, ctx, nil)

					deps := []services.CVE{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}

					fakeMongoLibrary.GetUniqueDependenciesReturns(deps, nil)

					cves := services.GenerateFakeCVE([]services.FakeCVEParam{
						{
							Id:          common.TestingCVE1Id,
							Description: common.TestingCVE1Description,
							Severity:    common.CVESeverityHigh,
						},
						{
							Id:          common.TestingCVE2Id,
							Description: common.TestingCVE2Description,
							Severity:    common.CVESeverityLow,
						},
					})

					fakeNVDNistLibrary.GetCVEsReturns(cves, nil)

					fakeMongoLibrary.CreateCVEReturns(nil)
					fakeMongoLibrary.DisconnectMongoClientReturns(fmt.Errorf("disconnect"))
				})

				it("returns an error", func() {
					err := core.FillDatabase(allUtils)
					require.Error(err)

					assert.EqualError(err, "disconnect")
				})
			})
		})
	})
}

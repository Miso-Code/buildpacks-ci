package services

import (
	"encoding/json"
	"fmt"
	"net"
	"net/http"
	"strings"
	"time"
)

//go:generate go run github.com/maxbrunsfeld/counterfeiter/v6 . NVDNistLibraryInterface
type NVDNistLibraryInterface interface {
	GetCVEs(vendor, product string) ([]NVDNistResponseCVEItem, error)
}

type NVDNistResponse struct {
	ResultsPerPage  int                      `json:"resultsPerPage"`
	StartIndex      int                      `json:"startIndex"`
	TotalResults    int                      `json:"totalResults"`
	Format          string                   `json:"format"`
	Version         string                   `json:"version"`
	Timestamp       string                   `json:"timestamp"`
	Vulnerabilities []NVDNistResponseCVEItem `json:"vulnerabilities"`
}

type NVDNistResponseCVEItem struct {
	CVE NVDNistResponseCVE `json:"cve"`
}

type NVDNistResponseCVE struct {
	Id               string `json:"id"`
	SourceIdentifier string `json:"sourceIdentifier"`
	Published        string `json:"published"`
	LastModified     string `json:"lastModified"`
	VulnStatus       string `json:"vulnStatus"`
	Descriptions     []struct {
		Lang  string `json:"lang"`
		Value string `json:"value"`
	} `json:"descriptions"`

	Metrics struct {
		CvssMetricV2 []NVDNistResponseCVEMetrics `json:"cvssMetricV2,omitempty"`
		CvssMetricV3 []NVDNistResponseCVEMetrics `json:"cvssMetricV31,omitempty"`
	} `json:"metrics"`
}

type NVDNistResponseCVEMetrics struct {
	CvssData struct {
		BaseScore    float64 `json:"baseScore"`
		BaseSeverity string  `json:"baseSeverity"`
	} `json:"cvssData"`
}

type FakeCVEParam struct {
	Id          string
	Description string
	Severity    string
	Score       float64
}

type NVDNistLibrary struct {
	ResultsPerPage int
	BaseUrl        string
	Client         http.Client
	ApiKey         string
}

var timeout = 70 * time.Second

func dialTimeout(network, addr string) (net.Conn, error) {
	return net.DialTimeout(network, addr, timeout)
}

func NewNVDNistLibrary(nvdNistApiKey string) NVDNistLibrary {
	return NVDNistLibrary{
		ResultsPerPage: 500,
		BaseUrl:        "https://services.nvd.nist.gov/rest/json/cves/2.0?virtualMatchString=cpe:2.3:a",
		Client: http.Client{
			Transport: &http.Transport{
				Dial: dialTimeout,
			},
		},
		ApiKey: nvdNistApiKey,
	}
}

func DoRequestWithRetry(req *http.Request, client *http.Client) (*http.Response, error) {
	var resp *http.Response
	var err error
	for i := 0; i < 3; i++ {
		resp, err = client.Do(req)
		if err == nil {
			break
		}
		time.Sleep(5 * time.Second)
	}
	return resp, err
}

func (nvd NVDNistLibrary) GetCVEs(vendor, product string) ([]NVDNistResponseCVEItem, error) {
	var cves []NVDNistResponseCVEItem

	url := fmt.Sprintf("%s:%s:%s&resultsPerPage=%d", nvd.BaseUrl, vendor, product, nvd.ResultsPerPage)
	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return []NVDNistResponseCVEItem{}, fmt.Errorf("error creating NVD Nist API request\n%w", err)
	}
	req.Header.Set("User-Agent", "cve-notification-app")
	req.Header.Add("apiKey", nvd.ApiKey)

	resp, err := DoRequestWithRetry(req, &nvd.Client)
	if err != nil {
		if strings.Contains(err.Error(), "Client.Timeout exceeded") {
			return []NVDNistResponseCVEItem{}, fmt.Errorf("NVD Nist API request timeout exceeded\n%w", err)
		}
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return []NVDNistResponseCVEItem{}, fmt.Errorf("NVD Nist API request failed with status code %d", resp.StatusCode)
	}

	var initialResponse NVDNistResponse
	err = json.NewDecoder(resp.Body).Decode(&initialResponse)
	if err != nil {
		return []NVDNistResponseCVEItem{}, fmt.Errorf("error decoding initial NVD Nist API response\n%w", err)
	}

	totalResults := initialResponse.TotalResults
	cves = append(cves, initialResponse.Vulnerabilities...)

	// Calculate the number of requests needed
	numRequests := totalResults / nvd.ResultsPerPage
	if totalResults%nvd.ResultsPerPage != 0 {
		numRequests++
	}

	// Make additional requests for remaining results
	for i := 1; i < numRequests; i++ {
		startIndex := i * nvd.ResultsPerPage
		url := fmt.Sprintf("%s:%s:%s&resultsPerPage=%d&startIndex=%d", nvd.BaseUrl, vendor, product, nvd.ResultsPerPage, startIndex)
		req, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return []NVDNistResponseCVEItem{}, fmt.Errorf("error creating NVD Nist API request\n%w", err)
		}
		req.Header.Set("User-Agent", "cve-notification-app")
		req.Header.Add("apiKey", nvd.ApiKey)

		resp, err := DoRequestWithRetry(req, &nvd.Client)
		if err != nil {
			return []NVDNistResponseCVEItem{}, fmt.Errorf("error making request to NVD Nist API\n%w", err)
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			return []NVDNistResponseCVEItem{}, fmt.Errorf("NVD Nist API request failed with status code %d", resp.StatusCode)
		}

		var additionalResponse NVDNistResponse
		err = json.NewDecoder(resp.Body).Decode(&additionalResponse)
		if err != nil {
			return []NVDNistResponseCVEItem{}, fmt.Errorf("error decoding NVD Nist API response\n%w", err)
		}

		cves = append(cves, additionalResponse.Vulnerabilities...)
	}

	return cves, nil
}

func GenerateFakeCVE(params []FakeCVEParam) []NVDNistResponseCVEItem {

	var cveItems []NVDNistResponseCVEItem

	for _, elem := range params {

		item := NVDNistResponseCVEItem{
			CVE: NVDNistResponseCVE{
				Id:               elem.Id,
				SourceIdentifier: "",
				Published:        "",
				LastModified:     "",
				VulnStatus:       "",
				Descriptions: []struct {
					Lang  string `json:"lang"`
					Value string `json:"value"`
				}{
					{
						Lang:  "en",
						Value: elem.Description,
					},
				},
				Metrics: struct {
					CvssMetricV2 []NVDNistResponseCVEMetrics `json:"cvssMetricV2,omitempty"`
					CvssMetricV3 []NVDNistResponseCVEMetrics `json:"cvssMetricV31,omitempty"`
				}{
					CvssMetricV2: []NVDNistResponseCVEMetrics{
						{
							CvssData: struct {
								BaseScore    float64 `json:"baseScore"`
								BaseSeverity string  `json:"baseSeverity"`
							}{
								BaseScore:    elem.Score,
								BaseSeverity: elem.Severity,
							},
						},
					},
				},
			},
		}

		cveItems = append(cveItems, item)
	}

	return cveItems
}

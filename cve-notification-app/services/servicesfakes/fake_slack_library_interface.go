// Code generated by counterfeiter. DO NOT EDIT.
package servicesfakes

import (
	"sync"

	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/services"
)

type FakeSlackLibraryInterface struct {
	SendNewCVENotificationStub        func(string, string, string, string, float64) error
	sendNewCVENotificationMutex       sync.RWMutex
	sendNewCVENotificationArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 float64
	}
	sendNewCVENotificationReturns struct {
		result1 error
	}
	sendNewCVENotificationReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSlackLibraryInterface) SendNewCVENotification(arg1 string, arg2 string, arg3 string, arg4 string, arg5 float64) error {
	fake.sendNewCVENotificationMutex.Lock()
	ret, specificReturn := fake.sendNewCVENotificationReturnsOnCall[len(fake.sendNewCVENotificationArgsForCall)]
	fake.sendNewCVENotificationArgsForCall = append(fake.sendNewCVENotificationArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 float64
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.SendNewCVENotificationStub
	fakeReturns := fake.sendNewCVENotificationReturns
	fake.recordInvocation("SendNewCVENotification", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.sendNewCVENotificationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSlackLibraryInterface) SendNewCVENotificationCallCount() int {
	fake.sendNewCVENotificationMutex.RLock()
	defer fake.sendNewCVENotificationMutex.RUnlock()
	return len(fake.sendNewCVENotificationArgsForCall)
}

func (fake *FakeSlackLibraryInterface) SendNewCVENotificationCalls(stub func(string, string, string, string, float64) error) {
	fake.sendNewCVENotificationMutex.Lock()
	defer fake.sendNewCVENotificationMutex.Unlock()
	fake.SendNewCVENotificationStub = stub
}

func (fake *FakeSlackLibraryInterface) SendNewCVENotificationArgsForCall(i int) (string, string, string, string, float64) {
	fake.sendNewCVENotificationMutex.RLock()
	defer fake.sendNewCVENotificationMutex.RUnlock()
	argsForCall := fake.sendNewCVENotificationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeSlackLibraryInterface) SendNewCVENotificationReturns(result1 error) {
	fake.sendNewCVENotificationMutex.Lock()
	defer fake.sendNewCVENotificationMutex.Unlock()
	fake.SendNewCVENotificationStub = nil
	fake.sendNewCVENotificationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSlackLibraryInterface) SendNewCVENotificationReturnsOnCall(i int, result1 error) {
	fake.sendNewCVENotificationMutex.Lock()
	defer fake.sendNewCVENotificationMutex.Unlock()
	fake.SendNewCVENotificationStub = nil
	if fake.sendNewCVENotificationReturnsOnCall == nil {
		fake.sendNewCVENotificationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendNewCVENotificationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSlackLibraryInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendNewCVENotificationMutex.RLock()
	defer fake.sendNewCVENotificationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSlackLibraryInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.SlackLibraryInterface = new(FakeSlackLibraryInterface)

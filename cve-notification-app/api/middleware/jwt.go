package middleware

import (
	"context"
	"errors"
	"net/http"

	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/api/models"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/api/utils"
	"github.com/dgrijalva/jwt-go"
)

// JWTMiddleware validates JWT tokens
func JWTMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Path == "/login" || r.URL.Path == "/signup" || r.URL.Path == "/cve" {
			next.ServeHTTP(w, r)
			return
		}

		authHeader := r.Header.Get("Authorization")
		if authHeader == "" {
			utils.WriteResponse(w, models.MessageResponse{Message: "Unauthorized"}, http.StatusUnauthorized)
			return
		}

		tokenStr := authHeader[len("Bearer "):]

		if tokenStr == "" {
			utils.WriteResponse(w, models.MessageResponse{Message: "Unauthorized"}, http.StatusUnauthorized)
			return
		}

		claims := &models.Claims{}

		tkn, err := jwt.ParseWithClaims(tokenStr, claims, func(token *jwt.Token) (interface{}, error) {
			return utils.GetJWTKey(), nil
		})
		if err != nil {
			if errors.Is(err, jwt.ErrSignatureInvalid) {
				utils.WriteResponse(w, models.MessageResponse{Message: "Unauthorized"}, http.StatusUnauthorized)
				return
			}
			utils.WriteResponse(w, models.MessageResponse{Message: "Bad Request"}, http.StatusBadRequest)
			return
		}
		if !tkn.Valid {
			utils.WriteResponse(w, models.MessageResponse{Message: "Unauthorized"}, http.StatusUnauthorized)
			return
		}

		r = r.WithContext(context.WithValue(r.Context(), "username", claims.Username))

		next.ServeHTTP(w, r)
	})
}

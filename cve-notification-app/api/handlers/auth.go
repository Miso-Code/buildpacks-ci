package handlers

import (
	"encoding/json"
	"fmt"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/services"
	"net/http"
	"time"

	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/api/models"
	"github.com/Miso-Code/buildpacks-ci/cve-notification-app/api/utils"
	"github.com/dgrijalva/jwt-go"
	"golang.org/x/crypto/bcrypt"
)

// LoginHandler handles the login route
func LoginHandler(w http.ResponseWriter, r *http.Request) {
	var user services.User
	_ = json.NewDecoder(r.Body).Decode(&user)

	library, client, ctx, err := utils.GetMongoConnection()
	if err != nil {
		fmt.Println(fmt.Errorf("Error connecting to MongoDB\n%w", err))
		http.Error(w, "Error connecting to MongoDB", http.StatusInternalServerError)
		return
	}

	userExists, existingUser, err := library.FindUserByUsername(ctx, client, user.Username)
	if err != nil {
		fmt.Println(fmt.Errorf("Error finding user by username\n%w", err))
		utils.WriteResponse(w, models.MessageResponse{Message: "Error logging in"}, http.StatusInternalServerError)
		return
	}

	if !userExists {
		utils.WriteResponse(w, models.MessageResponse{Message: "Invalid username or password"}, http.StatusUnauthorized)
		return
	}

	err = bcrypt.CompareHashAndPassword([]byte(existingUser.Password), []byte(user.Password))
	if err != nil {
		utils.WriteResponse(w, models.MessageResponse{Message: "Invalid username or password"}, http.StatusUnauthorized)
		return
	}

	claims := &models.Claims{
		Username: user.Username,
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: time.Now().Add(time.Hour * 24).Unix(),
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokenString, err := token.SignedString(utils.GetJWTKey())
	if err != nil {
		fmt.Println(fmt.Errorf("Error creating token\n%w", err))
		utils.WriteResponse(w, models.MessageResponse{Message: "Error creating token"}, http.StatusInternalServerError)
		return
	}

	utils.WriteResponse(w,
		models.JWTResponse{
			Token:   tokenString,
			Expires: time.Now().Add(time.Hour * 24),
		},
		http.StatusOK)
}

// SignupHandler handles the signup route
func SignupHandler(w http.ResponseWriter, r *http.Request) {
	var user services.User
	_ = json.NewDecoder(r.Body).Decode(&user)

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)
	if err != nil {
		utils.WriteResponse(w, models.MessageResponse{Message: "Error creating user"}, http.StatusInternalServerError)
		return
	}

	user.Password = string(hashedPassword)

	library, client, ctx, err := utils.GetMongoConnection()
	if err != nil {
		utils.WriteResponse(w, models.MessageResponse{Message: "Error connecting to MongoDB"}, http.StatusInternalServerError)
		return
	}

	userExists, _, err := library.FindUserByUsername(ctx, client, user.Username)
	if err != nil {
		utils.WriteResponse(w, models.MessageResponse{Message: "Error creating user"}, http.StatusInternalServerError)
		return
	}

	if userExists {
		utils.WriteResponse(w, models.MessageResponse{Message: "User already exists"}, http.StatusConflict)
		return
	}

	err = library.RegisterUser(ctx, client, user)
	if err != nil {
		utils.WriteResponse(w, models.MessageResponse{Message: "Error creating user"}, http.StatusInternalServerError)
		return
	}

	utils.WriteResponse(w, models.MessageResponse{Message: "User created successfully!"}, http.StatusCreated)
}

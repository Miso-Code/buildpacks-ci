import React, { useContext, useState } from 'react';
import { AppBar, Button, Toolbar, Typography, Container, List, ListItem, ListItemText, Switch, Modal, Box, useTheme, Select, MenuItem, TextField, Snackbar, Alert } from '@mui/material';
import { useNavigate } from "react-router-dom";
import { Context, Dependency } from './context';

type integrationType = 'webhook' | 'slack' | 'email';

const Dashboard: React.FC = () => {
  const [selectedDependency, setSelectedDependency] = useState<Dependency>();
  const [selectedIntegrationType, setSelectedIntegrationType] = useState<integrationType>();
  const [openSnackbar, setOpenSnackbar] = useState(false);


  const theme = useTheme();

  const { user, dependencies } = useContext(Context);
  const navigate = useNavigate();

  const handleLogout = () => navigate('/');

  const handleOpenModal = (dependency: Dependency) => {
    setSelectedDependency(dependency);
  }

  const handleAddIntegration = () => {
    console.log('add integration');
    setSelectedDependency(undefined);
    setSelectedIntegrationType(undefined);
    setOpenSnackbar(true);
  }

  const handleCloseSnackbar = () => {
    setOpenSnackbar(false);
  }

  return (
    <>
      <AppBar position="static">
        <Toolbar>
          <Typography variant="h5" style={{ flexGrow: 1 }}>
            CVEs Dependency Tracker
          </Typography>
          <Typography>
            {user?.email.toLocaleUpperCase()} -
          </Typography>
          <Button color="inherit" onClick={handleLogout}>Logout</Button>
        </Toolbar>
      </AppBar>
      <Container maxWidth="md">
        <Typography variant="h6" style={{ marginTop: 40 }}>
          Available Dependencies:
        </Typography>

        <List>
          {dependencies.map((dependency, index) => {
            const active = Math.random() > 0.5;
            return (
              <ListItem key={index}>
                <ListItemText>
                  {dependency.dependency}
                </ListItemText>
                <Switch edge="start" checked={active} />
                <Button variant='outlined' disabled={!active} onClick={() => handleOpenModal(dependency)}>Config</Button>
              </ListItem>
            )
          })}
        </List>

      </Container>
      <Modal
        open={!!selectedDependency}
        onClose={() => {
          setSelectedDependency(undefined)
          setSelectedIntegrationType(undefined)
        }}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <Box sx={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          backgroundColor: theme.palette.background.paper,
          padding: theme.spacing(2, 4, 3),
          minWidth: 400,
          display: 'flex',
          flexDirection: 'column',
          gap: 2
        }}>
          <Typography id="modal-modal-title" variant="h6" component="h2">
            {selectedDependency?.dependency} - Integrations
          </Typography>
          <Select
            defaultValue="1"
            onChange={(e) => setSelectedIntegrationType(e.target.value as integrationType)}
            value={selectedIntegrationType}
          >
            <MenuItem disabled value="1">Select you're integration type</MenuItem>
            <MenuItem value="webhook">Webhook</MenuItem>
            <MenuItem value="email" disabled>Email - Coming Soon</MenuItem>
            <MenuItem value="slack" disabled>Slack - Coming Soon</MenuItem>
          </Select>

          {selectedIntegrationType === 'webhook' && (
            <>
              <Typography>Webhook URL:</Typography>
              <TextField label="Type your webhook URL" variant="outlined" />
              <Button variant="contained" onClick={handleAddIntegration}>Save</Button>
            </>)
          }
        </Box>
      </Modal>
      <Snackbar
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
        open={openSnackbar}
        onClose={handleCloseSnackbar}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity="success"
          variant="filled"
          sx={{ width: '100%' }}
        >
         Integration added successfully
        </Alert>
      </Snackbar>
    </>
  );
}

export default Dashboard;
import { useState } from 'react';
import { Dependency, DependencyWithIntegration } from '../context';
import { getUserDependencies, updateUserDependencies } from '../services';

const useDependencies = () => {
    const [userDependencies, setUserDependencies] = useState<DependencyWithIntegration[]>([]);

    const fetchUserDependencies = async (token: string) => {
        const fetchedUserDependencies = await getUserDependencies(token);
        setUserDependencies(fetchedUserDependencies);
    };

    const addUserDependency = async (token: string, dependency: Dependency) => {
        const newUserDependency: DependencyWithIntegration = {
            dependency_id: dependency.id,
            integration: {
                type: 'webhook',
                active: false,
                settings: ''
            }
        };
        const newDependencies = [...userDependencies, newUserDependency];
        await updateUserDependencies(token, newDependencies);
        setUserDependencies(newDependencies);
    };

    const deleteUserDependency = async (token: string, dependencyId: string) => {
        const newDependencies = userDependencies.filter(dep => dep.dependency_id !== dependencyId);
        await updateUserDependencies(token, newDependencies);
        setUserDependencies(newDependencies);
    };

    const toggleIntegration = async (token: string, index: number) => {
        const newDependencies = [...userDependencies];
        newDependencies[index].integration.active = !newDependencies[index].integration.active;
        await updateUserDependencies(token, newDependencies);
        setUserDependencies(newDependencies);
    };

    const updateIntegration = async (token: string, dependencyId: string, field: 'type' | 'settings', value: string) => {
        const newDependencies = userDependencies.map(dep =>
            dep.dependency_id === dependencyId ? { ...dep, integration: { ...dep.integration, [field]: value } } : dep
        );
        await updateUserDependencies(token, newDependencies);
        setUserDependencies(newDependencies);
    };

    return { userDependencies, fetchUserDependencies, addUserDependency, deleteUserDependency, toggleIntegration, updateIntegration };
};

export default useDependencies;

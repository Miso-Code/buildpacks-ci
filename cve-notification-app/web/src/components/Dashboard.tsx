import React, { useContext, useState, useEffect } from 'react';
import { AppBar, Button, Toolbar, Typography, Container, List, ListItem, ListItemText, Switch, Modal, Box, useTheme, Select, MenuItem, TextField, Snackbar, Alert, IconButton } from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import { useNavigate } from "react-router-dom";
import { Context, Dependency, DependencyWithIntegration } from '../context';
import { getAllDependencies, getUserDependencies, updateUserDependencies } from "../services";

type integrationType = 'webhook' | 'slack' | 'email';

const Dashboard: React.FC = () => {
  const [selectedDependency, setSelectedDependency] = useState<DependencyWithIntegration | null>(null);
  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [userDependencies, setUserDependencies] = useState<DependencyWithIntegration[]>([]);
  const [openAddModal, setOpenAddModal] = useState(false);
  const { dependencies, setDependencies, user, setUser } = useContext(Context);
  const theme = useTheme();
  const navigate = useNavigate();

  useEffect(() => {
    if (!user) {
      navigate('/');
      return;
    }
  }, [user, navigate]);

  const handleLogout = () => {
    localStorage.removeItem('user');
    if (setUser) setUser(undefined);
    navigate('/');
  };

  const handleOpenModal = (dependency: DependencyWithIntegration) => {
    setSelectedDependency(dependency);
  };

  const handleAddIntegration = async () => {
    if (!selectedDependency) return;
    const index = userDependencies.findIndex((dep) => dep.dependency_id === selectedDependency.dependency_id);
    if (index === -1) return;
    const newDependencies = [...userDependencies];
    newDependencies[index].integration = selectedDependency.integration;

    await updateUserDependencies(user!.token!, newDependencies);

    setSnackbarMessage('Integration added successfully');
    setOpenSnackbar(true);
    setUserDependencies(newDependencies);
    setSelectedDependency(null);
  };

  const handleCloseSnackbar = () => {
    setOpenSnackbar(false);
  };

  const handleActivateIntegration = async (index: number) => {
    const newDependencies = [...userDependencies];
    newDependencies[index].integration.active = !newDependencies[index].integration.active;
    setUserDependencies(newDependencies);
    await updateUserDependencies(user!.token!, newDependencies);
  };

  const handleUpdateSelectedIntegrationSettings = (settings: string) => {
    if (!selectedDependency) return;
    selectedDependency.integration.settings = settings;
    setSelectedDependency({ ...selectedDependency });
  };

  const handleUpdateSelectedIntegrationType = (type: integrationType) => {
    if (!selectedDependency) return;
    selectedDependency.integration.type = type;
    setSelectedDependency({ ...selectedDependency });
  };

  const handleAddUserDependency = async (dependency: Dependency) => {
    const newUserDependency: DependencyWithIntegration = {
      dependency_id: dependency.id,
      integration: {
        type: 'webhook',
        active: false,
        settings: ''
      }
    };
    const newDependencies = [...userDependencies, newUserDependency];
    await updateUserDependencies(user!.token!, newDependencies);
    setUserDependencies(newDependencies);
    setOpenAddModal(false);
    setSnackbarMessage('Dependency added successfully');
    setOpenSnackbar(true);
  };

  const handleDeleteDependency = async (dependencyId: string) => {
    const newDependencies = userDependencies.filter(dep => dep.dependency_id !== dependencyId);
    await updateUserDependencies(user!.token!, newDependencies);
    setUserDependencies(newDependencies);
    setSnackbarMessage('Dependency removed successfully');
    setOpenSnackbar(true);
  };

  useEffect(() => {
    if (!setDependencies) return;

    const fetchData = async () => {
      const dependencies: Dependency[] = await getAllDependencies();
      setDependencies(dependencies);
    };

    if (dependencies.length === 0) fetchData();
  }, [dependencies.length, setDependencies]);

  useEffect(() => {
    if (!user?.token) {
      console.log('No token');
      return;
    }
    const fetchUserDependencies = async () => {
      if (user && user.token) {
        const userDependencies = await getUserDependencies(user.token);
        setUserDependencies(userDependencies);
      }
    };
    fetchUserDependencies();
  }, [user?.token]);

  const availableDependencies = dependencies.filter(dep =>
      !userDependencies.some(userDep => userDep.dependency_id === dep.id)
  );

  return (
      <>
        <AppBar position="static" color="primary">
          <Toolbar sx={{ display: 'flex', justifyContent: 'space-between' }}>
            <Typography variant="h5" sx={{ flexGrow: 1 }}>
              CVEs Dependency Tracker
            </Typography>
            <Typography>
              {user?.username.toUpperCase()} -
            </Typography>
            <Button color="inherit" onClick={handleLogout}>Logout</Button>
          </Toolbar>
        </AppBar>
        <Container maxWidth="md" sx={{ marginTop: 4, padding: 4 }}>
          <Typography variant="h6" sx={{ marginBottom: 2 }}>
            User dependencies being tracked
          </Typography>

          <List>
            {userDependencies.map((userDep, index) => {
              const dependency = dependencies.find(dep => dep.id === userDep.dependency_id);
              return (
                  <ListItem key={index} sx={{ borderBottom: '1px solid #ddd' }}>
                    <ListItemText>
                      {dependency ? `${dependency.vendor} - ${dependency.product}` : userDep.dependency_id}
                    </ListItemText>
                    <Switch edge="start" checked={userDep.integration.active} onChange={() => handleActivateIntegration(index)} />
                    <Button variant='outlined' disabled={!userDep.integration.active} onClick={() => handleOpenModal(userDep)}>Config</Button>
                    <IconButton edge="end" aria-label="delete" onClick={() => handleDeleteDependency(userDep.dependency_id)}>
                      <DeleteIcon />
                    </IconButton>
                  </ListItem>
              );
            })}
          </List>

          <Button variant="contained" color="primary" onClick={() => setOpenAddModal(true)} sx={{ marginTop: 2 }}>
            Add Dependency
          </Button>
        </Container>

        <Modal
            open={openAddModal}
            onClose={() => setOpenAddModal(false)}
            aria-labelledby="add-dependency-modal-title"
            aria-describedby="add-dependency-modal-description"
        >
          <Box sx={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            backgroundColor: theme.palette.background.paper,
            padding: theme.spacing(2, 4, 3),
            minWidth: 400,
            maxHeight: '80vh',
            overflow: 'auto',
            display: 'flex',
            flexDirection: 'column',
            gap: 2,
            boxShadow: 24,
          }}>
            <Typography id="add-dependency-modal-title" variant="h6" component="h2">
              Add Dependency
            </Typography>
            <List>
              {availableDependencies.map((dependency) => (
                  <ListItem key={dependency.id} button onClick={() => handleAddUserDependency(dependency)}>
                    <ListItemText primary={`${dependency.vendor} - ${dependency.product}`} />
                  </ListItem>
              ))}
            </List>
          </Box>
        </Modal>

        <Modal
            open={!!selectedDependency}
            onClose={() => setSelectedDependency(null)}
            aria-labelledby="modal-modal-title"
            aria-describedby="modal-modal-description"
        >
          <Box sx={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            backgroundColor: theme.palette.background.paper,
            padding: theme.spacing(2, 4, 3),
            minWidth: 400,
            display: 'flex',
            flexDirection: 'column',
            gap: 2,
            boxShadow: 24,
          }}>
            <Typography id="modal-modal-title" variant="h6" component="h2">
              {selectedDependency ? `${dependencies.find(dep => dep.id === selectedDependency.dependency_id)?.vendor} - ${dependencies.find(dep => dep.id === selectedDependency.dependency_id)?.product}` : ''}
            </Typography>
            <Select
                defaultValue="1"
                onChange={(e) => handleUpdateSelectedIntegrationType(e.target.value as integrationType)}
                value={selectedDependency?.integration.type || 1}
            >
              <MenuItem disabled value="1">Select your integration type</MenuItem>
              <MenuItem value="webhook">Webhook</MenuItem>
              <MenuItem value="email" disabled>Email - Coming Soon</MenuItem>
              <MenuItem value="slack" disabled>Slack - Coming Soon</MenuItem>
            </Select>

            {selectedDependency?.integration.type === 'webhook' && (
                <>
                  <Typography>Webhook URL:</Typography>
                  <TextField
                      label="Type your webhook URL"
                      variant="outlined"
                      onChange={e => handleUpdateSelectedIntegrationSettings(e.target.value)}
                      value={selectedDependency?.integration.settings}
                  />
                  <Button variant="contained" onClick={handleAddIntegration}>Save</Button>
                </>)
            }
          </Box>
        </Modal>
        <Snackbar
            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
            open={openSnackbar}
            onClose={handleCloseSnackbar}
        >
          <Alert
              onClose={handleCloseSnackbar}
              severity="success"
              variant="filled"
              sx={{ width: '100%' }}
          >
            {snackbarMessage}
          </Alert>
        </Snackbar>
      </>
  );
}

export default Dashboard;

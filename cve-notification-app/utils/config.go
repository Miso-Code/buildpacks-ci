package utils

import (
	"fmt"
	"gopkg.in/yaml.v3"
	"log"
	"os"
	"path/filepath"
)

type Config struct {
	DbUri           string `yaml:"db_uri"`
	NvdNistApiKey   string `yaml:"nvd_nist_api_key"`
	SlackWebhookUrl string `yaml:"slack_webhook_url"`
}

// ReadConfig reads the configuration file
func ReadConfig() Config {
	_, configFile := GetConfigFilePath()

	file, err := os.Open(configFile)
	if err != nil {
		fmt.Println("Error opening config file:", err)
		return Config{}
	}
	defer file.Close()

	var config Config
	decoder := yaml.NewDecoder(file)
	if err := decoder.Decode(&config); err != nil {
		fmt.Println("Error reading config file:", err)
		return Config{}
	}

	return config
}

func GetConfigFilePath() (string, string) {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		fmt.Println("Error finding home directory:", err)
		log.Fatal(err)
	}

	configDir := filepath.Join(homeDir, ".cveapp")
	configFile := filepath.Join(configDir, "config.yaml")

	return configDir, configFile
}

func FileExists(path string) bool {
	_, err := os.Stat(path)
	return !os.IsNotExist(err)
}

func GetConfigFile() (Config, bool) {
	_, configFilePath := GetConfigFilePath()

	if !FileExists(configFilePath) {
		fmt.Println("Config file not found. Please run the configure command first.")
		return Config{}, false
	}

	config := ReadConfig()

	if config.DbUri == "" {
		fmt.Println("Please set the db_uri in the config file")
		return Config{}, false
	}

	if config.NvdNistApiKey == "" {
		fmt.Println("Please set the nvd_nist_api_key in the config file")
		return Config{}, false
	}

	return config, true
}
